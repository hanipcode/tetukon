name: Deploy to AWS

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: üöÄ Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì• Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build services
        run: npm run build

      - name: üîß Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: üÜî Get AWS Account ID
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "CDK_DEFAULT_ACCOUNT=$ACCOUNT_ID" >> $GITHUB_ENV
          echo "CDK_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> $GITHUB_ENV
          echo "AWS account ID: $ACCOUNT_ID"

      - name: üîç CDK Bootstrap (if needed)
        run: |
          if ! aws cloudformation describe-stacks --stack-name CDKToolkit --region ${{ secrets.AWS_DEFAULT_REGION }} > /dev/null 2>&1; then
            echo "CDK Bootstrap not found, bootstrapping..."
            npm run infra:bootstrap
          else
            echo "CDK Bootstrap already exists, skipping..."
          fi

      - name: üîÑ CDK Diff
        run: npm run infra:synth
        continue-on-error: true

      - name: üö¢ Deploy to AWS
        run: npm run infra:deploy

      - name: üß™ Test deployment
        run: |
          API_URL="${{ steps.deploy.outputs.api-url || 'https://ie6tpz7u2e.execute-api.ap-southeast-1.amazonaws.com/prod' }}"
          
          echo "Testing API endpoints..."
          
          # Test user service
          echo "Testing User Service..."
          curl -f "${API_URL}/users" || exit 1
          curl -f "${API_URL}/users/health" || exit 1
          
          # Test store service  
          echo "Testing Store Service..."
          curl -f "${API_URL}/stores" || exit 1
          curl -f "${API_URL}/stores/health" || exit 1
          
          # Test order service
          echo "Testing Order Service..."
          curl -f "${API_URL}/orders" || exit 1
          curl -f "${API_URL}/orders/health" || exit 1
          
          echo "‚úÖ All services are healthy!"

      - name: üìä Deployment Summary
        if: always()
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ secrets.AWS_DEFAULT_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Account:** ${{ env.CDK_DEFAULT_ACCOUNT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ **Status:** Deployment successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîó API Endpoints" >> $GITHUB_STEP_SUMMARY
            echo "- **API Gateway:** https://ie6tpz7u2e.execute-api.ap-southeast-1.amazonaws.com/prod/" >> $GITHUB_STEP_SUMMARY
            echo "- **User Service:** https://ie6tpz7u2e.execute-api.ap-southeast-1.amazonaws.com/prod/users" >> $GITHUB_STEP_SUMMARY
            echo "- **Store Service:** https://ie6tpz7u2e.execute-api.ap-southeast-1.amazonaws.com/prod/stores" >> $GITHUB_STEP_SUMMARY
            echo "- **Order Service:** https://ie6tpz7u2e.execute-api.ap-southeast-1.amazonaws.com/prod/orders" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status:** Deployment failed!" >> $GITHUB_STEP_SUMMARY
          fi

  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: üì¢ Notify deployment result
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi 