name: Terraform PR Check

on:
  pull_request:
    branches: [ main ]
    paths: 
      - 'infrastructure/terraform/**'

env:
  TF_VAR_file: "environments/dev/terraform.tfvars"

jobs:
  terraform-check:
    name: 'Terraform Plan Check'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure/terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -var-file="${{ env.TF_VAR_file }}" -no-color -input=false
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `## 🏗️ Terraform Plan Results - Hybrid ALB + Traefik Architecture

          #### Terraform Format and Style 🖌 \`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️ \`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖 \`${{ steps.validate.outcome }}\`
          #### Terraform Plan 📖 \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan Details</summary>

          \`\`\`terraform
          ${process.env.PLAN}
          \`\`\`

          </details>

          ### 🎯 Architecture Overview
          This infrastructure uses a **hybrid ALB + Traefik** approach:
          - **🌐 ALB**: Public-facing load balancer with TLS termination
          - **🔀 Traefik**: Internal middleware for advanced routing and features
          - **🚀 Microservices**: Private ECS services with service discovery

          **Environment**: \`dev\` | **Region**: \`ap-southeast-1\` | **Pusher**: @${{ github.actor }}

          ${{ steps.plan.outcome == 'failure' && '❌ **Plan failed! Please check the errors above before merging.**' || '✅ **Plan completed successfully. Review the infrastructure changes above before merging.**' }}

          ---
          <sub>🔄 This will create/update: VPC, ALB, Traefik (ECS), Microservices (ECS), ECR repositories, and supporting resources.</sub>`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          }) 