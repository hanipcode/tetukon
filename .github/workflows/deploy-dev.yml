name: Deploy Infrastructure to AWS (Dev)

on:
  workflow_dispatch:

env:
  TF_VAR_file: "environments/dev/terraform.tfvars"
  AWS_REGION: "ap-southeast-1"

jobs:
  deploy:
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    environment: dev
    
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure/terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS credentials
      run: |
        echo "🔍 Verifying AWS credentials..."
        aws sts get-caller-identity
        echo "🔍 AWS Region: $AWS_REGION"
        echo "✅ AWS credentials verified successfully"

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: |
        echo "🔍 Debug: Initializing Terraform..."
        echo "🔍 Debug: Current directory: $(pwd)"
        echo "🔍 Debug: Backend configuration:"
        cat backend.tf
        terraform init -no-color

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: |
        echo "🔍 Debug: Current working directory: $(pwd)"
        echo "🔍 Debug: Listing files in current directory:"
        ls -la
        echo "🔍 Debug: AWS Region: $AWS_REGION"
        echo "🔍 Debug: TF_VAR_file: $TF_VAR_file"
        echo "🔍 Debug: Checking if tfvars file exists:"
        ls -la "$TF_VAR_file"
        echo "🔍 Debug: Running terraform plan..."
        terraform plan -var-file="$TF_VAR_file" -no-color -input=false

    - name: Terraform Apply
      id: apply
      run: terraform apply -var-file="${{ env.TF_VAR_file }}" -auto-approve -input=false

    - name: Get Deployment Outputs
      id: outputs
      run: |
        echo "alb_dns=$(terraform output -raw alb_dns_name 2>/dev/null || echo 'Not available')" >> $GITHUB_OUTPUT
        echo "cluster_name=$(terraform output -raw ecs_cluster_name 2>/dev/null || echo 'Not available')" >> $GITHUB_OUTPUT
        echo "ecr_urls=$(terraform output -json ecr_repository_urls 2>/dev/null || echo '{}')" >> $GITHUB_OUTPUT

    - name: Build and Push Traefik Image
      if: steps.outputs.outputs.ecr_urls != '{}'
      run: |
        # Get AWS Account ID
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Login to ECR
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        
        # Get Traefik ECR URL
        TRAEFIK_ECR_URL=$(echo '${{ steps.outputs.outputs.ecr_urls }}' | jq -r '.traefik' 2>/dev/null || echo "")
        
        if [ -n "$TRAEFIK_ECR_URL" ] && [ "$TRAEFIK_ECR_URL" != "null" ]; then
          echo "Building and pushing Traefik image..."
          
          # Build Traefik image
          docker build -f infrastructure/aws/Dockerfile.traefik -t traefik .
          
          # Tag for ECR
          docker tag traefik:latest $TRAEFIK_ECR_URL:latest
          docker tag traefik:latest $TRAEFIK_ECR_URL:$(date +%Y%m%d-%H%M%S)
          
          # Push to ECR
          docker push $TRAEFIK_ECR_URL:latest
          docker push $TRAEFIK_ECR_URL:$(date +%Y%m%d-%H%M%S)
          
          echo "✅ Traefik image pushed successfully"
        else
          echo "⚠️ Traefik ECR URL not found, skipping image build"
        fi
      working-directory: .

    - name: Display Deployment Results
      if: always()
      run: |
        echo "## 🚀 Deployment Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.apply.outcome }}" = "success" ]; then
          echo "### ✅ Infrastructure Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service Endpoints:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **API Gateway**: http://${{ steps.outputs.outputs.alb_dns }}" >> $GITHUB_STEP_SUMMARY
          echo "- 👤 **User Service**: http://${{ steps.outputs.outputs.alb_dns }}/users" >> $GITHUB_STEP_SUMMARY
          echo "- �� **Store Service**: http://${{ steps.outputs.outputs.alb_dns }}/stores" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **Order Service**: http://${{ steps.outputs.outputs.alb_dns }}/orders" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Traefik Dashboard**: http://${{ steps.outputs.outputs.alb_dns }}:8080" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Infrastructure:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 **ECS Cluster**: ${{ steps.outputs.outputs.cluster_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🌍 **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏷️ **Environment**: dev" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs above for error details." >> $GITHUB_STEP_SUMMARY
        fi 